'use strict';
var EventEmitter, Q, Sipgate, identity, util, vCard, xmlrpc,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

util = require('util');

xmlrpc = require('xmlrpc');

Q = require('q');

EventEmitter = require('events').EventEmitter;

vCard = require('./vcard');

identity = [
  {
    ClientName: 'node-sipgate-client',
    ClientVersion: '0.0.1',
    ClientVendor: 'SebastianJanzen'
  }
];

module.exports = Sipgate = (function(superClass) {
  extend(Sipgate, superClass);

  function Sipgate(auth, callback) {
    var identify;
    this.config = {
      host: "samurai.sipgate.net",
      port: 443,
      path: "/RPC2",
      basic_auth: auth
    };
    this.client = new xmlrpc.createSecureClient(this.config);
    this.methodCall = Q.nbind(this.client.methodCall, this.client);
    identify = this.clientIdentify()["catch"](this._errorHandler);
    if (typeof callback === 'function') {
      identify.then(callback);
    }
  }

  Sipgate.prototype._errorHandler = function(reason) {
    console.error(reason);
    throw new Error(reason);
  };

  Sipgate.prototype._validateResponse = function(response) {
    if (response.StatusCode !== 200) {
      return Q.reject("The Sipgate API returned " + response.StatusCode + ": " + response.StatusString);
    }
    return response;
  };

  Sipgate.prototype._methodCallSafe = function(arg) {
    var args, method, prefix, responseName;
    method = arg.method, prefix = arg.prefix, responseName = arg.responseName, args = arg.args;
    if (args == null) {
      args = null;
    }
    if (prefix == null) {
      prefix = 'samurai';
    }
    if (!method) {
      return Q.reject("Method was not set!");
    }
    return this.methodCall(prefix + "." + method, args).then(this._validateResponse).then(function(response) {
      if (typeof response[responseName] === 'undefined') {
        return Q.reject("Response does not contain attribute '" + responseName + "'");
      }
      return response[responseName];
    });
  };

  Sipgate.prototype.listMethods = function() {
    return this._methodCallSafe({
      method: 'listMethods',
      prefix: 'system',
      responseName: 'listMethods'
    });
  };

  Sipgate.prototype.clientIdentify = function() {
    return this.methodCall("samurai.ClientIdentify", identity).then(this._validateResponse).then((function(_this) {
      return function(response) {
        if (response.StatusCode !== 200) {
          return Q.reject("Couldn't identify to server!");
        }
        _this.emit("ready", _this, response);
        return _this;
      };
    })(this));
  };

  Sipgate.prototype.phonebookListGet = function() {
    return this._methodCallSafe({
      method: 'PhonebookListGet',
      responseName: 'PhonebookList'
    });
  };

  Sipgate.prototype.phonebookEntryGet = function(entryIds) {
    var args;
    if (!Array.isArray(entryIds)) {
      entryIds = [entryIds];
    }
    args = {
      EntryIDList: entryIds
    };
    return this._methodCallSafe({
      method: 'PhonebookEntryGet',
      args: [args]
    }).then((function(_this) {
      return function(response) {
        response.EntryList.forEach(function(entry, idx, array) {
          return array[idx].Entry = vCard.parseVcard(entry.Entry);
        });
        return response.EntryList;
      };
    })(this));
  };

  Sipgate.prototype.sessionInitiate = function(options) {
    if (options.TOS == null) {
      options.TOS = 'voice';
    }
    if (!(options.LocalUri && options.RemoteUri)) {
      return Q.reject("Mandatory options: 'LocalUri' and 'RemoteUri'");
    }
    return this._methodCallSafe({
      method: "SessionInitiate",
      args: [options],
      responseName: "SessionID"
    });
  };

  Sipgate.prototype.ownUriListGet = function() {
    return this._methodCallSafe({
      method: "OwnUriListGet",
      responseName: "OwnUriList"
    });
  };

  Sipgate.prototype.sessionStatusGet = function(sessionId) {
    return this._methodCallSafe({
      method: "SessionStatusGet",
      args: [
        {
          SessionID: sessionId
        }
      ],
      responseName: "StatusCode"
    });
  };

  Sipgate.prototype.balanceGet = function() {
    return this._methodCallSafe({
      method: "BalanceGet",
      responseName: "CurrentBalance"
    });
  };

  return Sipgate;

})(EventEmitter);

// ---
// generated by coffee-script 1.9.2